# -*- coding: utf-8 -*-
"""Unsupervised_ML_Nb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YsFKpQDZ7baBTc9zJdbn2nV5f5lIQhbx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

cols = ["area", "perimeter", "compactness", "length", "width", "asymmetry", "groove", "class"]
df = pd.read_csv("seeds_dataset.txt", names=cols, sep=r"\s+")

df.head()

for i in range(len(cols)-1):
  for j in range(i+1, len(cols)-1):
    x_label = cols[i]
    y_label = cols[j]
    sns.scatterplot(x=x_label, y=y_label, data=df, hue='class')
    plt.show()

"""#**Clustering**

#Kmeans
"""

from sklearn.cluster import KMeans

x = 'asymmetry'
y = 'compactness'
X = df[[x, y]].values

kmeans = KMeans(n_clusters=3).fit(X)

clusters = kmeans.labels_

cluster_df = pd.DataFrame(np.hstack((X, clusters.reshape(-1, 1))), columns=[x, y, 'class'])

#KMeans Predict
sns.scatterplot(x=x, y=y, data=cluster_df, hue='class')
plt.show()

#Original Data
sns.scatterplot(x=x, y=y, data=df, hue='class')
plt.show()

"""#Higher Dimension"""

X = df[cols[:-1]].values

kmeans = KMeans(n_clusters=3).fit(X)
clusters = kmeans.labels_
cluster_df = pd.DataFrame(np.hstack((X, clusters.reshape(-1, 1))), columns=df.columns)

#KMeans Predict
sns.scatterplot(x=x, y=y, data=cluster_df, hue='class')
plt.show()

#Original Data
sns.scatterplot(x=x, y=y, data=df, hue='class')
plt.show()

"""#PCA"""

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
transformed_x = pca.fit_transform(X)

X.shape

transformed_x.shape

transformed_x[:5]

plt.scatter(transformed_x[:, 0], transformed_x[:, 1])
plt.show()

kmeans_pca_df = pd.DataFrame(np.hstack((transformed_x, kmeans.labels_.reshape(-1, 1))), columns=['pca1', 'pca2', 'class'])

truth_pca_df = pd.DataFrame(np.hstack((transformed_x, df['class'].values.reshape(-1, 1))), columns=['pca1', 'pca2', 'class'])

#Kmeans classes
sns.scatterplot(x='pca1', y='pca2', data=kmeans_pca_df, hue='class')
plt.show()

#Truth classes
sns.scatterplot(x='pca1', y='pca2', data=truth_pca_df, hue='class')
plt.show()

